name: BE CD

on:
  repository_dispatch:
    types: [trigger-cd]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: rlatkdecr2
  ECS_SERVICE: rlatkdservice2
  ECS_CLUSTER: rlatkdcluster2
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME: rlatkdcontainer2
  S3_BUCKET: rlatkdbe1

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Trigger Lambda Function
        run: |
          aws lambda invoke --function-name lambda_handler --payload '{"Records":[{"s3":{"bucket":{"name":"rlatkdbe1"},"object":{"key":"demo-0.0.1-SNAPSHOT.jar"}}}]}' response.json
          cat response.json

      - name: Download from S3
        run: |
          aws s3 cp s3://${{ env.S3_BUCKET }}/demo-0.0.1-SNAPSHOT.jar ./demo/build/libs/demo-0.0.1-SNAPSHOT.jar

      - name: Replace AWS ID
        run: |
          sed -i "s/{AWS_ACCOUNT_ID}/${{ secrets.AWS_ACCOUNT_ID }}/g" ${{ env.ECS_TASK_DEFINITION }}

      - name: Login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./demo
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Image ID to ECS TASK
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
